@model CobanlarMarket.Models.AllViewModel
@{
    ViewBag.Title = "EditCampaign";
    Layout = "~/Views/Shared/_ManagementLayout.cshtml";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/bbbootstrap/libraries@main/choices.min.css">
<link href="https://cdn.jsdelivr.net/npm/pretty-checkbox@3.0/dist/pretty-checkbox.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/gh/bbbootstrap/libraries@main/choices.min.js"></script>

<div class=" mt-5 ml-5 mr-5">
   
    <form id="campaignForm">
        <div class="row justify-content-center position-relative">
            <div class="col-12 bg-white mb-5">
                <div class="col-12 pt-4 pb-4 ">
                    <h3>Kampanya Düzenle</h3>

                </div>
                <div class="col-12 ">

                    <div class="form-group">
                        <label>Resim Yükle *</label>

                        <div class="form-group img-parent">
                            <div class="d-flex img-pre" id="image-container">
                                @if (Model.campaigns.FirstOrDefault().campaign_cover != null)
                                {
                                    <div class="p-2" imgid="@Model.campaigns.FirstOrDefault().id">
                                        <img src="@Model.campaigns.FirstOrDefault().campaign_cover" alt="" class="img-thumbnail" style="width:200px" />
                                        @* <a class="remove-img-btn btn" onclick="removeImgDatabase(@Model.campaigns.FirstOrDefault().id)">x</a>*@
                                    </div>
                                }


                            </div>

                            <input type="file" class="form-control" id="campaignImg" accept=".jpg,.jpeg,.png" aria-describedby="campaignImg" onchange="dosyaOnizlemeNew(this);">

                        </div>
                        <small class="form-text text-muted">
                            1 resim eklemeniz gerekiyor. Eklediğiniz resimlerin kalitesine dikkat edin, arka plan rengi standartlarına uyun. Ürünün tüm ayrıntıları gösterdiğine dikkat edin.
                        </small>
                    </div>
                    <div class="form-group">
                        <label for="title">Kampanya Başlığı *</label>
                        @*<input type="text" class="form-control" id="name" placeholder="Kategori İsmi">*@
                        @Html.EditorFor(model => Model.campaigns.FirstOrDefault().campaign_title, "Kampanya Başlığı", new { htmlAttributes = new { name = "name", @class = "form-control", placeholder = "Kampanya Başlığı", id = "title" } })
                        @Html.ValidationMessageFor(model => Model.campaigns.FirstOrDefault().campaign_title, "")


                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="startdate">Başlangıç Tarihi</label>

                            @Html.EditorFor(model => Model.campaigns.FirstOrDefault().campaign_start_date, "Başlangıç Tarihi", new { htmlAttributes = new { type = "date", name = "startdate", @class = "form-control", placeholder = "Başlangıç Tarihi", id = "startdate" } })
                            @Html.ValidationMessageFor(model => Model.campaigns.FirstOrDefault().campaign_start_date, "", new { @class = "text-danger" })

                        </div>

                        <div class="form-group col-md-6">
                            <label for="enddate">Bitiş Tarihi</label>

                            @Html.EditorFor(model => Model.campaigns.FirstOrDefault().campaign_end_date, "Bitiş Tarihi", new { htmlAttributes = new { type = "date", name = "enddate", @class = "form-control", placeholder = "Başlangıç Tarihi", id = "enddate" } })
                            @Html.ValidationMessageFor(model => Model.campaigns.FirstOrDefault().campaign_end_date, "", new { @class = "text-danger" })

                        </div>
                    </div>
                    <div class="form-group ">
                        <label>Kampanya Ürünleri</label>

                        <select class="label ui selection fluid dropdown   " id="products" multiple>

                            @foreach (var item in Model.products)
                            {

                                <option value="@item.id" @(item.campaign_products.Any(p => p.product_id == item.id && p.camapign_id == Model.campaigns.FirstOrDefault().id) ? "selected" : "")>@item.name</option>
                            }
                        </select>
                    </div>

                        <label class="switch switch-text switch-secondary switch-pill form-control-label position-absolute " style="top:0;right:15px;">
                            <input type="checkbox" class="switch-input form-check-input" id="status" @(Model.campaigns.FirstOrDefault().is_active==true?" checked":"") >
                            <span class="switch-label" data-on="Aktif" data-off="Pasif"></span>
                            <span class="switch-handle"></span>
                        </label>
                   
                    <div class="form-group" style="height:35px;">
                        <button class="btn btn-outline-primary float-right" id="submitbtn">Kaydet</button>
                    </div>
                </div>

            </div>
            </div>
    </form>
</div>



<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>

<script>

     $(document).ready(function () {
        var element = document.getElementById('products');
        var products = new Choices('#products', {
            removeItemButton: true,
        });

        var startdateFromServer = '@Model.campaigns.FirstOrDefault().campaign_start_date';
        var enddateFromServer = '@Model.campaigns.FirstOrDefault().campaign_end_date';

        // Moment.js kullanarak tarihi biçimlendirme
        var formattedStartdate = moment(startdateFromServer, "DD.MM.YYYY HH:mm:ss").format("YYYY-MM-DD");
        document.getElementById('startdate').value = formattedStartdate;

        var formattedEnddate = moment(enddateFromServer, "DD.MM.YYYY HH:mm:ss").format("YYYY-MM-DD");
        document.getElementById('enddate').value = formattedEnddate;




         var startDateInput = document.getElementById("startdate");
         var endDateInput = document.getElementById("enddate");

         // Başlangıç tarihini bugünden başlat
         var today = new Date().toISOString().split("T")[0];
         startDateInput.setAttribute("min", today);
         endDateInput.setAttribute("min", today);

         startDateInput.addEventListener("change", function () {
            
             endDateInput.setAttribute("min", startDateInput.value);


             if (endDateInput.value < startDateInput.value && endDateInput.value != "") {
                 alert("Bitiş tarihi, başlangıç tarihinden önce olamaz!");
                 endDateInput.value = "";
             }
         });

         // Bitiş tarihini başlangıç tarihinden önce seçilemez yap
         endDateInput.addEventListener("change", function () {
             if (endDateInput.value < startDateInput.value) {
                 alert("Bitiş tarihi, başlangıç tarihinden önce olamaz!");
                 endDateInput.value = "";
             }
         });




        $('#submitbtn').on("click", function (e) {
            e.preventDefault();
            var id = '@(Model.campaigns.FirstOrDefault().id)';
            var img = $('#campaignImg')[0].files[0];
            var formData = new FormData();
            formData.append("Id", id);

            var title = $('#title').val() ||"";
            var startdate = $('#startdate').val() || "";
            var enddate = $('#enddate').val() || "";
            var selectedProducts = products.getValue(true);
            var status = $('#status').is(':checked') ? 'Aktif' : 'Pasif';


            formData.append("Title", title);
            formData.append("StartDate", startdate);
            formData.append("EndDate", enddate);
            formData.append("Products", selectedProducts);
            formData.append("Status", status);

            // Eğer img boşsa image-container'daki mevcut resmi kullan
            if (!img) {
                var existingImg = $('#image-container img').attr('src');
                if (existingImg) {
                    fetch(existingImg)
                        .then(response => response.blob())
                        .then(blob => {
                            img = new File([blob], "existing-image.jpg", { type: blob.type });
                            formData.append("Img", img);
                            sendFormData(formData); 
                        });
                } else {
                    formData.append("Img", null);
                    sendFormData(formData);
                }
            } else {
                formData.append("Img", img);
                sendFormData(formData);
            }
        });

        function sendFormData(formData) {
            if ($('#campaignForm').valid()) {
                $.ajax({
                    url: '/Management/EditCampaign/',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.success) {
                            toastr.success(response.message);
                        } else {
                            toastr.error(response.message);
                        }
                    },
                    error: function (e) {
                        toastr.error("An error occurred.");
                    }
                });
            }
        }
    });

    var selectedFiles = []; // Seçilen dosyaları saklamak için dizi

    function dosyaOnizlemeNew(input) {
        var container = $('#image-container');
        container.empty(); // Eski resimleri temizle
        selectedFiles = Array.from(input.files); // Seçilen dosyaları diziye ekle

        selectedFiles.forEach(file => {
            var reader = new FileReader();
            reader.onload = function (e) {
                var img = $('<img>').attr('src', e.target.result).addClass('img-thumbnail').css("width", "200px");
                //var removeBtn = $('<button>').text('x').addClass('remove-btn').on('click', function (event) {
                //    event.preventDefault(); // Varsayılan davranışı engelle
                //    removeImage(file);
                //});
                var wrapper = $('<div>').addClass('p-2').append(img);
                container.append(wrapper);
            };
            reader.readAsDataURL(file);
        });
    }
    function removeImage(fileToRemove) {
        var reader = new FileReader();
        reader.onload = function (e) {
            var fileDataURL = e.target.result;

            // Dosyayı seçilen dosyalardan çıkar
            selectedFiles = selectedFiles.filter(file => file !== fileToRemove);

            // Ekrandaki resmi kaldır
            $('#image-container img').each(function () {
                if ($(this).attr('src') === fileDataURL) {
                    $(this).parent().remove();
                }
            });


            $("#campaignImg").remove();
            $(".img-parent").append("  <input type='file' class='form-control' id='campaignImg' accept='.jpg,.jpeg,.png' aria-describedby='campaignImg' onchange='dosyaOnizlemeNew(this);'>")


        };
        reader.readAsDataURL(fileToRemove);
    }
    document.addEventListener("DOMContentLoaded", function () {
       
    });
</script>
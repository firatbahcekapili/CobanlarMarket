@model CobanlarMarket.Models.AllViewModel
@{
    ViewBag.Title = "EditProduct";
    Layout = "~/Views/Shared/_ManagementLayout.cshtml";
}

<style>
    .img-pre {
        position: relative;
    }

    .img-thumbnail {
        position: relative;
        width: 100px;
        height: 100px;
    }

        .img-thumbnail .remove-btn {
            position: absolute;
            top: 0;
            right: 0;
            background: rgba(0, 0, 0, 0.5);
            color: #fff;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            padding: 0.2rem;
            font-size: 0.8rem;
        }

    .img-pre {
        position: relative;
        max-height: 240px;
        overflow-y: auto;
    }

    .remove-img-btn {
        position: absolute;
        top: 4px;
        right: 3px;
        color: red;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        z-index: 10;
        font-size: 20px;
    }

        .remove-img-btn:hover {
            color: darkred;
        }
</style>
<div class=" mt-5 ml-5 mr-5">

    <form id="ProductForm">
        @{
            CobanlarMarket.Models.products p = new CobanlarMarket.Models.products();
            CobanlarMarket.Models.products_skus ps = new CobanlarMarket.Models.products_skus();
        }
        <div class="row justify-content-center  bg-white mb-5">
            <div class="col-12 col-xl-10  pt-4 pb-4 pl-5 ">
                <h3>Ürün Ekle</h3>

            </div>
            <!-- Left Column -->
            <div class="col-xl-5 mr-xl-5 mb-xl-0 mb-5 bg-white p-5">
                <div class="form-group">
                    <label for="productName">Ürün Adı *</label>
                    @*<input type="text" class="form-control" id="productName" placeholder="Ürün Adı Giriniz">*@
                    @Html.EditorFor(model => Model.products.FirstOrDefault().name, "Ürün Adı", new { htmlAttributes = new { name = "productName", @class = "form-control", placeholder = "Ürün Adı Giriniz", id = "productName" } })
                    @Html.ValidationMessageFor(model => Model.products.FirstOrDefault().name, "")

                    <small class="form-text text-muted">Ürün adı en az 2 harften oluşmalıdır.</small>

                </div>
                <div class="form-row">
                    <div class="form-group col-lg-4 col-md-6">
                        <label for="category">Kategori *</label>
                        <select class="form-control" id="category">
                            <option disabled>Kategori Seçiniz</option>

                        </select>

                    </div>
                    <div class="form-group col-lg-4 col-md-6">
                        <label for="gender">Alt Kategori *</label>
                        <select class="form-control" id="subCategory" disabled>
                            <option disabled>Alt Kategori Seçiniz</option>

                        </select>
                    </div>
                    <div class="form-group col-lg-4 col-md-12">
                        <label for="gender">Alt Alt Kategori </label>
                        <select class="form-control" id="subsubCategory">
                            <option disabled>Alt Alt Kategori Seçiniz</option>

                        </select>
                    </div>
                    <small class="form-text text-muted col-12">Kategori ve Alt Kategori alanlarının seçilmesi zorunludur. Yoksa ekleyebilirsiniz <a href="/Management/AddCategory">Ekle</a> </small>

                </div>

                <div class="form-group">
                    <label for="description">Açıklama</label>
                    @*<textarea class="form-control" id="description" rows="3"></textarea>*@
                    @Html.TextAreaFor(model => Model.products.FirstOrDefault().description, new { name = "description", @class = "form-control", placeholder = "Açıklama", id = "description" })
                    @Html.ValidationMessageFor(model => Model.products.FirstOrDefault().description, "")

                </div>
            </div>
            <!-- Right Column -->
            <div class="col-xl-5 mb-xl-0 mb-5 bg-white p-5">
                <div class="form-group">
                    <label>Resim Yükle *</label>


                    <div class="form-group">
                        <div class="d-flex img-pre row" id="image-containerr">
                            <!-- Resimler buraya eklenecek -->

                            @foreach (var item in Model.products.FirstOrDefault().product_images)
                            {
                                <div class="p-2 position-relative col-auto" imgid="@item.id">
                                    <img src="@item.image_path" alt="" class="img-thumbnail" />
                                    <button type="button" class="remove-img-btn" onclick="removeImgDatabase(@item.id)">
                                        <i class="mdi mdi-trash-can icon"></i>
                                    </button>
                                </div>
                            }
                        </div>
                        <div class="d-flex img-pre" id="image-container">
                            <!-- Resimler buraya eklenecek -->

                        </div>
                        <div class="input-div">
                            <input type="file" class="form-control" id="productImg" accept=".jpg,.jpeg,.png" multiple aria-describedby="userImg" onchange="dosyaOnizlemeNew(this);">

                        </div>

                    </div>
                    <small class="form-text text-muted">
                        En az 1 resim eklemeniz gerekiyor. Eklediğiniz resimlerin kalitesine dikkat edin, arka plan rengi standartlarına uyun. Ürünün tüm ayrıntıları gösterdiğine dikkat edin.
                    </small>
                </div>
                <div class="form-row">

                    <div class="form-group col-md-12">
                        <label for="size">Stok Adeti</label>
                        @Html.EditorFor(model => Model.products.FirstOrDefault().products_skus.FirstOrDefault().quantity, "Stok Adeti", new { htmlAttributes = new { type = "number", name = "quantity", @class = "form-control", placeholder = "Stok Adeti Giriniz", id = "quantity" } })
                        @Html.ValidationMessageFor(model => Model.products.FirstOrDefault().products_skus.FirstOrDefault().quantity, "")
                    </div>
                    <div class="form-group col-md-12">
                        <label for="price">Fiyat *</label>
                        <input type="number"
                               id="price"
                               name="price"
                               class="form-control"
                               placeholder="Fiyatı Giriniz"
                               value="@(Model.products.FirstOrDefault().products_skus.FirstOrDefault()?.price?.ToString().Replace(",","."))" />

                        @Html.ValidationMessageFor(model => Model.products.FirstOrDefault().products_skus.FirstOrDefault().price, "")
                    </div>

                    <div class="form-group col-md-12">
                        <label for="price">Eski Fiyat</label>
                        <input type="number"
                               id="old_price"
                               name="old_price"
                               class="form-control"
                               placeholder="Eski Fiyatı Giriniz"
                               value="@(Model.products.FirstOrDefault().products_skus.FirstOrDefault()?.old_price?.ToString().Replace(",","."))" />

                        @Html.ValidationMessageFor(model => Model.products.FirstOrDefault().products_skus.FirstOrDefault().old_price, "")
                    </div>





                </div>
                <button type="submit" id="submitbtn" class="btn btn-primary">Onayla</button>
            </div>
        </div>

    </form>
</div>


<script>

    $(document).ready(function () {
        $.ajax({
            url: '/Management/GetCategories/',
            type: 'GET',
            dataType: 'json',
            success: function (data) {
                if (data.error) {
                    console.error(data.error);
                    alert('Failed to retrieve categories: ' + data.error);
                } else {
                    var $categories = $('#category');
                    $.each(data, function (i, item) {
                        $categories.append($('<option>', {
                            value: item.id,
                            text: item.name,
                            pid: item.id
                        }));
                    });
                 var categoryId = '@(Model.products.FirstOrDefault().subcategory_id)';
                 var parentId = '@(Model.products.FirstOrDefault().sub_categories?.parent_id)';

                if (categoryId === 'null') categoryId = null;
                if (parentId === 'null') parentId = null;

                        $('#category option').each(function () {
                            if (categoryId !== null) {
                                if ($(this).attr('pid') === parentId) {
                                    $(this).prop('selected', true);
                                    console.log($(this).attr('pid'));
                                }
                            }
                        });
                            $('#category').trigger('change');


                            setTimeout(function () {

                               $('#subCategory option').each(function () {
                                    if ('@(Model.products.FirstOrDefault().category_type)'==='1'|| '@(Model.products.FirstOrDefault().category_type)' ==='2') {
                                         if ($(this).val() === '@(Model.products.FirstOrDefault().subcategory_id)' ) {
                                             $(this).prop('selected', true);
                                             console.log($(this).val());

                                          }
                                    }

                                 });
                                $('#subCategory').trigger('change');

                            }, 100);


                        }
                    },
                    error: function (xhr, status, error) {
                        console.error(xhr.responseText);
                        alert('Failed to retrieve categories. Error: ' + xhr.responseText);
                    }
                });



        $('#category').on('change', function () {
            var selectedOption = $(this).find('option:selected');
            var categoryId = selectedOption.attr('pid');
            if (categoryId == "add") {
                window.location = "/Management/AddCategory";
            }
            else if (categoryId) {
                $.ajax({
                    url: '/Management/GetSubCategories',
                    type: 'GET',
                    data: { categoryId: categoryId },
                    success: function (data) {
                        var subCategorySelect = $('#subCategory');
                        subCategorySelect.empty();
                        subCategorySelect.append('<option value="" disabled selected>Alt Kategori Seçin</option>');

                        $.each(data, function (index, subCategory) {
                            subCategorySelect.append('<option value="' + subCategory.id + '">' + subCategory.name + '</option>');
                        });
                        $('#subCategory').prop("disabled", false);

                    },
                    error: function () {
                        alert('Alt kategoriler yüklenirken bir hata oluştu.');
                    }
                });
            } else {
                $('#subCategory').empty();
                $('#subCategory').append('<option value="" disabled>Alt Kategori Seçin</option>');

            }
        });



        $('#subCategory').on('change', function () {
            $('#subsubCategory').empty();

            $.ajax({
                url: '/Management/GetSubSubCategories',
                type: 'GET',
                data: { subcategoryId: this.value },
                success: function (subsubCategories) {
                    if (subsubCategories.length > 0) {
                        var $subsubcategories = $('#subsubCategory');
                        $subsubcategories.append($('<option>', {
                           text:"Kategori Seçiniz",
                            cId:"-1"
                        }));
                    $.each(subsubCategories, function (i, item) {
                        var $option = $('<option>', {
                            value: item.id,
                            text: item.name,
                            pid: item.parent_sub_category_id
                        });
                        $subsubcategories.append($option);

                        // Eğer category_type 2 ise kontrol yap
                        if ('@(Model.products.FirstOrDefault().category_type)' === '2') {
                            console.log('@(Model.products.FirstOrDefault()?.subcategory_id)');

                            // Eklenen option'un value değeri ile category_id'yi karşılaştır
                            if (item.id === '@(Model.products.FirstOrDefault()?.sub_subcategory_id)') {
                                $option.prop('selected', true);
                                console.log($option.val()+ "ssssss");
                            }
                        }
                    });

                           if ('@(Model.products.FirstOrDefault().category_type)'!=='2') {
                               $subsubcategories.find(`[cId='-1']`).prop('selected', true);
                           }


                    }
                }
            });
        })



       $.ajax({
       url: '/Management/GetAttributes/',
       type: 'GET',
       dataType: 'json',
       success: function (data) {
           if (data.error) {
               console.error(data.error);
               alert('Failed to retrieve attributes: ' + data.error);
           } else {
               var $color = $('#color');
               var $size = $('#size');
               $.each(data, function (i, item) {

                   if (item.type === 'color') {
                       $color.append($('<option>', {
                           value: item.id,
                           text: item.value,

                       }));
                   } else if (item.type ==='size') {
                       $size.append($('<option>', {
                           value: item.id,
                           text: item.value,

                       }));
                   }

               });

               var colorattr =@(Model.products.FirstOrDefault().products_skus.FirstOrDefault().color_attribute_id );
               var sizeattr =@(Model.products.FirstOrDefault().products_skus.FirstOrDefault().size_attribute_id);

               if (colorattr!=-1) {
                   $('#color option').each(function () {

                           if ($(this).val() ==colorattr) {
                               $(this).prop('selected', true);
                           }

                   });
               }

               if (sizeattr !=-1) {
                   $('#size option').each(function () {

                       if ($(this).val() == sizeattr) {
                           $(this).prop('selected', true);
                       }

                   });
               }



           }
       },
       error: function (xhr, status, error) {
           console.error(xhr.responseText);
           alert('Failed to retrieve categories. Error: ' + xhr.responseText);
       }
   });





    });

    var selectedFiles = []; // Seçilen dosyaları saklamak için dizi

    // Dosyaları önizleme ve ekleme
    function dosyaOnizlemeNew(input) {
        var container = $('#image-container');
        // Yeni seçilen dosyalar
        var newFiles = Array.from(input.files);

        // Seçilen dosyaları güncelle
        selectedFiles = selectedFiles.concat(newFiles);

        newFiles.forEach(file => {
            var reader = new FileReader();
            reader.onload = function (e) {
                var img = $('<img>').attr('src', e.target.result).addClass('img-thumbnail');
                var removeBtn = $('<button>').addClass('remove-img-btn').html('<i class="mdi mdi-close icon"></i>').on('click', function (event) {
                    event.preventDefault();
                    removeImage(file);
                });
                var wrapper = $('<div>').addClass('p-2 position-relative').append(img).append(removeBtn);
                container.append(wrapper);
            };
            reader.readAsDataURL(file);
        });
    }

    // Ekrandaki resmi kaldır ve selectedFiles dizisini güncelle
    function removeImage(fileToRemove) {
        var reader = new FileReader();
        reader.onload = function (e) {
            var fileDataURL = e.target.result;

            // Dosyayı seçilen dosyalardan çıkar
            selectedFiles = selectedFiles.filter(file => file !== fileToRemove);

            // Ekrandaki resmi kaldır
            $('#image-container img').each(function () {
                if ($(this).attr('src') === fileDataURL) {
                    $(this).parent().remove();
                }
            });

            updateFileInput();
        };
        reader.readAsDataURL(fileToRemove);
    }



    function removeImgDatabase(id) {


        $.ajax({
            url: '/Management/RemoveImg/',
            type: 'POST',
            data: { Id: id },
            success: function (data) {
                if (data.success) {
                    $('[imgid="' + id + '"]').remove();

                } else {
                    toastr.error(data.message);
                }
            },
             error: function (xhr, status, error) {
            console.error(xhr.responseText);
            alert(xhr.responseText);
             }
         });
    }

// FormData nesnesine tüm dosyaları ekle
function updateFileInput() {
    var dataTransfer = new DataTransfer();
    selectedFiles.forEach(file => {
        dataTransfer.items.add(file);
    });
    $('#productImg')[0].files = dataTransfer.files;
}

   $(document).ready(function () {
    $('#submitbtn').on("click", function (e) {
        e.preventDefault();




        var category = $('#category').find('option:selected').val();
        var subCategory = $("#subCategory").find('option:selected').val();


        if (!category || category === "Kategori Seçiniz") {
            toastr.error("Lütfen bir kategori seçiniz.");
            return;
        }

        if (!subCategory || subCategory === "Alt Kategori Seçiniz") {
            toastr.error("Lütfen bir alt kategori seçiniz.");
            return;
        }




        if ($('#ProductForm').valid()) {
            var formData = new FormData();

            selectedFiles.forEach(file => {
                var newFileName = file.name.replace(/\s+/g, '-');

                var newFile = new File([file], newFileName, { type: file.type });

                formData.append('Imgs', newFile);
                console.log(newFile);
            });
            var name = $('#productName').val() || "";
            var id = @Model.products.FirstOrDefault().id;
            var subCategory = !isNaN(parseInt($("#subCategory").find('option:selected').val(), 10)) ? parseInt($("#subCategory").find('option:selected').val(), 10) : null;
            var description = $('#description').val() || "";

            var subsubCategory = !isNaN(parseInt($("#subsubCategory").find('option:selected').val(), 10)) ? parseInt($("#subsubCategory").find('option:selected').val(), 10) : null;



            var quantity = $('#quantity').val() || "";
            var price = $('#price').val() || "";
            var oldprice = $('#old_price').val() || "";




            if (oldprice != "") {
                if (parseFloat(price) >= parseFloat(oldprice)) {
                    toastr.error("Eski fiyat yeni fiyattan küçük olamaz.");

                } else {
                    formData.append('Name', name);
                    formData.append('Id', id);
                    formData.append('SubSubCategory', subsubCategory);

                    formData.append('SubCategory', subCategory);



                    if (subsubCategory !== null && subsubCategory !== undefined && subsubCategory !== '') {
                        //formData.append('SubCategory', subsubCategory);
                        formData.append('CategoryType', 2);
                    } else {
                        console.log("elseee");
                        //formData.append('SubCategory', subCategory);
                        formData.append('CategoryType', 1);
                    }

                    formData.append('Description', description);

                    formData.append('Quantity', quantity);
                    formData.append('Price', price);
                    formData.append('OldPrice', oldprice);
                    for (var pair of formData.entries()) {
                        console.log(pair[0] + ', ' + pair[1]);
                    }
                    $.ajax({
                        url: '/Management/EditProduct/',
                        type: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function (result) {
                            if (result.success) {
                                toastr.success(result.message);


                                if (result.skippedFiles.length != 0) {
                                    toastr.error("Aynı ada sahip bazı resimler zaten kayıtlı: " + result.skippedFiles);
                                }

                            } else {
                                toastr.error(result.message);

                            }

                            var imgbody = $("#image-containerr");
                            var imgprebody = $("#image-container");

                            imgbody.empty();
                            imgprebody.empty();

                            var i = 1;
                            result.files.forEach(function (product) {
                                var row = "<div class='p-2 position-relative col-auto' imgid='" + product.id + "'>" +
                                    "<img src='" + product.image_path + "' class='img-thumbnail'/>" +
                                    "<button type='button' class='remove-img-btn' onclick='removeImgDatabase(" + product.id + ")'>" +
                                    "<i class='mdi mdi-trash-can icon'></i>" +
                                    "</button>" +
                                    "</div>";

                                imgbody.append(row);
                                i++;
                            });

                            $(".input-div").empty();
                            var input = "<input type='file' class='form-control' id='productImg' accept='.jpg,.jpeg,.png' multiple aria-describedby='userImg' onchange='dosyaOnizlemeNew(this);'>";
                            $(".input-div").append(input);

                            selectedFiles = [];

                        },
                        error: function (xhr, status, error) {
                            console.error('AJAX Error: ' + error);
                            toastr.error('Bir hata oluştu: ' + error);
                            selectedFiles = [];

                        }
                    });
                }
            } else {

                formData.append('Name', name);
                formData.append('Id', id);
                formData.append('SubCategory', subCategory);
                formData.append('Description', description);

                formData.append('Quantity', quantity);
                formData.append('Price', price);
                formData.append('OldPrice', oldprice);

                formData.append('SubSubCategory', subsubCategory);

                if (subsubCategory !== null && subsubCategory !== undefined && subsubCategory !== '') {
                    //formData.append('SubCategory', subsubCategory);
                    formData.append('CategoryType', 2);
                } else {
                    console.log("elseee");
                    //formData.append('SubCategory', subCategory);
                    formData.append('CategoryType', 1);
                }



                $.ajax({
                    url: '/Management/EditProduct/',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (result) {
                        if (result.success) {
                            toastr.success(result.message);
                        } else {
                            toastr.error(result.message);

                        }


                        var imgbody = $("#image-containerr");
                        var imgprebody = $("#image-container");

                        imgbody.empty();
                        imgprebody.empty();

                        var i = 1;
                        result.files.forEach(function (product) {
                            var row = "<div class='p-2' imgid='" + product.id + "'> <img src='" + product.image_path + "' class='img-thumbnail'/><a class='remove-img-btn btn' onclick='removeImgDatabase(" + product.id + ")'>x</a></div>"
                            imgbody.append(row);
                            i++;
                        });

                        $(".input-div").empty();
                        var input = "<input type='file' class='form-control' id='productImg' accept='.jpg,.jpeg,.png' multiple aria-describedby='userImg' onchange='dosyaOnizlemeNew(this);'>";
                        $(".input-div").append(input);



                    },
                    error: function (xhr, status, error) {
                        console.error('AJAX Error: ' + error);
                        toastr.error('Bir hata oluştu: ' + error);
                    }
                });
            }


        }
    });

    function updateImageContainer(files) {
        var container = $('#image-container');
        container.empty();

        files.forEach(filePath => {
            var img = $('<img>').attr('src', filePath).addClass('img-thumbnail');
            var removeBtn = $('<button>').text('x').addClass('remove-btn').on('click', function (event) {
                event.preventDefault();
                removeImgDatabase(filePath);
            });
            var wrapper = $('<div>').addClass('p-2').append(img).append(removeBtn);
            container.append(wrapper);
        });
    }
});



</script>
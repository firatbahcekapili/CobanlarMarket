@model CobanlarMarket.Models.AllViewModel
@{
    ViewBag.Title = "EditCoupon";
    Layout = "~/Views/Shared/_ManagementLayout.cshtml";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/bbbootstrap/libraries@main/choices.min.css">
<link href="https://cdn.jsdelivr.net/npm/pretty-checkbox@3.0/dist/pretty-checkbox.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/gh/bbbootstrap/libraries@main/choices.min.js"></script>

<div class=" mt-5 ml-5 mr-5">
  
    <form id="couponForm" action="/Management/EditCoupon" method="post">
        @Html.AntiForgeryToken()
        <div class="row justify-content-center position-relative bg-white mb-5">
            <div class="col-12  pt-4 pb-4 pl-5  ">
                <h3>Kupon Düzenle</h3>

            </div>

            <div class="col-12 p-5">




                <div class="form-horizontal">

                    <div class="form-group">
                        <label for="code">Kupon Kodu *</label>

                        @Html.EditorFor(model => model.coupons.FirstOrDefault().Code, new { htmlAttributes = new { name = "code", @class = "form-control", placeholder = "Kupon Kodunu Giriniz", id = "code" } })
                        @Html.ValidationMessageFor(model => model.coupons.FirstOrDefault().Code, "", new { @class = "text-danger" })

                    </div>

                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="dtype">İndirim Türü *</label>

                            @Html.DropDownListFor(model => model.coupons.FirstOrDefault().DiscountType, (IEnumerable<SelectListItem>)ViewBag.DiscountTypes, new { name = "dtype", @class = "form-control", placeholder = "İndirim Türü Seçiniz", id = "dtype" })
                            @Html.ValidationMessageFor(model => model.coupons.FirstOrDefault().DiscountType, "", new { @class = "text-danger" })


                        </div>

                        <div class="form-group col-md-6">
                            <label for="dvalue">İndirim Değeri *</label>
                            @{
                                var discountValueString = Model.coupons.FirstOrDefault().DiscountValue.ToString().Replace(",", ".");
                            }
                            @Html.EditorFor(model => discountValueString, new { htmlAttributes = new { name = "dvalue", @class = "form-control", placeholder = "İndirim Değeri Giriniz", id = "dvalue" } })
                            @Html.ValidationMessageFor(model => model.coupons.FirstOrDefault().DiscountValue, "", new { @class = "text-danger" })

                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="minprice">Kupon İçin Gerekli Minumum Tutar</label>
                            @{
                                var MinimumSpendString = Model.coupons.FirstOrDefault().MinimumSpend.ToString().Replace(",", ".");
                            }
                            @Html.EditorFor(model => MinimumSpendString, new { htmlAttributes = new { type = "number", name = "minprice", min = "0", @class = "form-control", placeholder = "Fiyatı Giriniz", id = "minprice" } })
                            @Html.ValidationMessageFor(model => model.coupons.FirstOrDefault().MinimumSpend, "", new { @class = "text-danger" })

                        </div>

                        <div class="form-group col-md-6">
                            <label for="minprice">Maksimum İndirim Tutarı</label>

                            @{
                                var MaxDiscountString = Model.coupons.FirstOrDefault().MaxDiscountAmount.ToString().Replace(",", ".");
                            }
                            @Html.EditorFor(model => MaxDiscountString, new { htmlAttributes = new { type = "number", name = "maxprice", min = "0", @class = "form-control", placeholder = "Fiyatı Giriniz", id = "maxprice" } })
                            @Html.ValidationMessageFor(model => model.coupons.FirstOrDefault().MaxDiscountAmount, "", new { @class = "text-danger" })

                        </div>


                    </div>

                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="StartDate">Başlangıç Tarihi *</label>



                            <input type="date" id="StartDate" name="StartDate" class="form-control" placeholder="Başlangıç Tarihi">

                            @Html.ValidationMessageFor(model => model.coupons.FirstOrDefault().StartDate, "", new { @class = "text-danger" })

                        </div>

                        <div class="form-group col-md-6">
                            <label for="EndDate">Bitiş Tarihi *</label>

                            <input type="date" id="EndDate" name="EndDate" class="form-control" placeholder="Bitiş Tarihi">

                            @Html.ValidationMessageFor(model => model.coupons.FirstOrDefault().EndDate, "", new { @class = "text-danger" })

                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label>Kuponun Geçerli Olacağı Kategorileri Seçin</label>




                            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.12/themes/default/style.min.css" />
                            <script src="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.12/jstree.min.js"></script>


                            <div id="categoryTree" style="max-height:300px;overflow:auto;">
                                <ul>
                                    @foreach (var category in Model.categories)
                                    {
                                        <li id="c-@category.id" class=" @(category.coupon_categories.Any(p => p.category_id == category.id && p.coupon_id == Model.coupons.FirstOrDefault().Id) ? "selected" : "")">
                                            @category.name
                                            <ul>
                                                @foreach (var subcategory in Model.sub_categories.Where(x => x.parent_id == category.id))
                                                {
                                                    <li id="sc-@subcategory.id" class="@(subcategory.coupon_categories.Any(p => p.subcategory_id == subcategory.id && p.coupon_id == Model.coupons.FirstOrDefault().Id) ? "selected" : "")">
                                                        @subcategory.name
                                                        <ul>
                                                            @foreach (var subsubCategory in Model.sub_subcategories.Where(ss => ss.parent_sub_category_id == subcategory.id))
                                                            {
                                                                <li id="ssc-@subsubCategory.id" class=" @(subsubCategory.coupon_categories.Any(p => p.sub_subcategory_id == subsubCategory.id && p.coupon_id == Model.coupons.FirstOrDefault().Id) ? "selected" : "")">@subsubCategory.name</li>
                                                            }
                                                        </ul>
                                                    </li>
                                                }
                                            </ul>
                                        </li>
                                    }
                                </ul>
                            </div>

                            @*<div id="categories" style="max-height:300px;overflow:auto;">
                                @foreach (var category in Model.categories)
                                {
                                    if (Model.sub_categories.Any(x => x.parent_id == category.id))
                                    {
                                        <div class="category-group">
                                            <div class="pretty p-default  p-curve p-smooth">
                                                <input type="checkbox" class="category-checkbox" data-category-id="@category.id" id="@category.id" @(category.coupon_categories.Any(p => p.category_id == category.id && p.coupon_id == Model.coupons.FirstOrDefault().Id) ? "checked" : "") />
                                                <div class="state p-primary">
                                                    <label>@category.name</label>
                                                </div>
                                            </div>

                                            <div class="subcategories">
                                                @foreach (var subcategory in Model.sub_categories.Where(x => x.parent_id == category.id))
                                                {
                                                    <div class="pretty p-default p-curve p-smooth">
                                                        <input type="checkbox" class="subcategory-checkbox" data-parent-id="@category.id" id="@subcategory.id" @(subcategory.coupon_categories.Any(p => p.subcategory_id == subcategory.id && p.coupon_id == Model.coupons.FirstOrDefault().Id) ? "checked" : "") @(category.coupon_categories.Any(p => p.category_id == category.id && p.coupon_id == Model.coupons.FirstOrDefault().Id) ? "checked disabled" : "") />
                                                        <div class="state p-primary">
                                                            <label>@subcategory.name</label>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="pretty p-default p-curve p-smooth">
                                            <input type="checkbox" class="category-checkbox" data-category-id="@category.id" id="@category.id" @(category.coupon_categories.Any(p => p.category_id == category.id && p.coupon_id == Model.coupons.FirstOrDefault().Id) ? "checked" : "") />
                                            <div class="state p-primary">
                                                <label>@category.name</label>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>*@
                        </div>
                        <div class="form-group col-md-6">
                            <label>Kuponun Geçerli Olacağı Ürünleri Seçin</label>

                            <select class="label ui selection fluid dropdown   " id="products" multiple>

                                @foreach (var item in Model.products)
                                {

                                    <option value="@item.id" @(item.coupon_products.Any(p => p.product_id == item.id && p.coupon_id == Model.coupons.FirstOrDefault().Id) ? "selected" : "")>@item.name</option>
                                }
                            </select>
                        </div>
                    </div>

                    <label class="switch switch-text switch-secondary switch-pill form-control-label position-absolute " style="top:0;right:25px;">
                        <input type="checkbox" class="switch-input form-check-input" id="status" @(Model.coupons.FirstOrDefault().IsActive == true ? " checked" : "")>
                        <span class="switch-label" data-on="Aktif" data-off="Pasif"></span>
                        <span class="switch-handle"></span>
                    </label>


                    <div class="form-group">
                        <div class="col-md-offset-2 ">
                            <a id="submitbtn" class="btn btn-outline-primary float-right">Kaydet</a>
                        </div>
                    </div>
                </div>



            </div>
        </div>

    </form>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<script>
    $(document).ready(function () {
       
        var selected = $('.selected');
        console.log(selected);
        $('#categoryTree').jstree({
            'core': {
                'data': $('#categoryTree').html() // HTML yapısını al
                , "themes": {
                    "icons": false
                }

            },
            "plugins": ["checkbox","themes"]
        }).on("ready.jstree", function () {
            // Tüm selected düğümleri kontrol et
            selected.each(function () {
                var nodeId = $(this).attr('id'); // ID'yi al
                if (nodeId) {
                    $('#categoryTree').jstree().check_node(nodeId); 
                    $('#categoryTree').jstree().open_node(nodeId); 

                }
            });
        })
    });

    document.addEventListener("DOMContentLoaded", function () {
        var startDateInput = document.getElementById("StartDate");
        var endDateInput = document.getElementById("EndDate");

        // Başlangıç tarihini bugünden başlat
        var today = new Date().toISOString().split("T")[0];
        startDateInput.setAttribute("min", today);
        endDateInput.setAttribute("min", today);


        // Başlangıç tarihi seçildiğinde bitiş tarihini aktif hale getir
        startDateInput.addEventListener("change", function () {
            endDateInput.disabled = false;
            endDateInput.setAttribute("min", startDateInput.value);
            if (endDateInput.value < startDateInput.value && endDateInput.value != "") {
                alert("Bitiş tarihi, başlangıç tarihinden önce olamaz!");
                endDateInput.value = "";
            }
        });

        // Bitiş tarihini başlangıç tarihinden önce seçilemez yap
        endDateInput.addEventListener("change", function () {
            if (endDateInput.value < startDateInput.value) {
                alert("Bitiş tarihi, başlangıç tarihinden önce olamaz!");
                endDateInput.value = "";
            }
        });
    });

    document.addEventListener('DOMContentLoaded', function () {
        var categoryCheckboxes = document.querySelectorAll('.category-checkbox');

        categoryCheckboxes.forEach(function (checkbox) {
            checkbox.addEventListener('change', function () {
                var categoryId = this.getAttribute('data-category-id');
                var subcategoryCheckboxes = document.querySelectorAll('.subcategory-checkbox[data-parent-id="' + categoryId + '"]');
                subcategoryCheckboxes.forEach(function (subCheckbox) {
                    subCheckbox.checked = checkbox.checked;
                    subCheckbox.disabled = checkbox.checked;
                });
            });
        });

        var subcategoryCheckboxes = document.querySelectorAll('.subcategory-checkbox');
        subcategoryCheckboxes.forEach(function (checkbox) {
            checkbox.addEventListener('change', function () {
                var parentId = this.getAttribute('data-parent-id');
                var parentCheckbox = document.querySelector('.category-checkbox[data-category-id="' + parentId + '"]');
                var siblingSubcategoryCheckboxes = document.querySelectorAll('.subcategory-checkbox[data-parent-id="' + parentId + '"]');

                var allChecked = Array.from(siblingSubcategoryCheckboxes).every(function (subCheckbox) {
                    return subCheckbox.checked;
                });

                if (allChecked) {
                    parentCheckbox.checked = true;
                    parentCheckbox.indeterminate = false;
                    siblingSubcategoryCheckboxes.forEach(function (subCheckbox) {
                        subCheckbox.disabled = true;
                    });
                } else {
                    parentCheckbox.checked = false;
                    parentCheckbox.indeterminate = true;
                    siblingSubcategoryCheckboxes.forEach(function (subCheckbox) {
                        subCheckbox.disabled = false;
                    });
                }
            });
        });

       

       
   
        var element = document.getElementById('products');
        var products = new Choices('#products', {
            removeItemButton: true,
        });



            var startdateFromServer = '@Model.coupons.FirstOrDefault().StartDate'
            var enddateFromServer = '@Model.coupons.FirstOrDefault().EndDate'

        // Moment.js kullanarak tarihi biçimlendirme
        var formattedStartdate = moment(startdateFromServer, "DD.MM.YYYY HH:mm:ss").format("YYYY-MM-DD");
        document.getElementById('StartDate').value = formattedStartdate;

        var formattedEnddate = moment(enddateFromServer, "DD.MM.YYYY HH:mm:ss").format("YYYY-MM-DD");
        document.getElementById('EndDate').value = formattedEnddate;


        $('#submitbtn').on("click", function (e) {
            e.preventDefault();
            var id='@Model.coupons.FirstOrDefault().Id';
            var code = $('#code').val() ||"";
            var dtype = $('#dtype').find('option:selected').val() || "";
            var dvalue = $('#dvalue').val() || "";
            var minprice = $('#minprice').val() || "";
            var maxprice = $('#maxprice').val() || "";
            var startdate = $('#StartDate').val() || "";
            var enddate = $('#EndDate').val() || "";
            var status = $('#status').is(':checked') ? 'Aktif' : 'Pasif';

            var formData = new FormData();
            formData.append("Id", parseInt(id));
            formData.append("Code", code);
            formData.append("Type", dtype);
            formData.append("Value", dvalue);
            formData.append("MinPrice", minprice);
            formData.append("MaxPrice", maxprice);
            formData.append("StartDate", startdate);
            formData.append("EndDate", enddate);
            formData.append("Status", status);

            formData.append("__RequestVerificationToken", $('#couponForm input[name="__RequestVerificationToken"]').val());


            var selectedNodes = $('#categoryTree').jstree('get_checked', true);
            var selectedIds = [];

            var parentIds = selectedNodes.map(function (node) {
                return node.id; // Her düğümün ID'sini al
            });

            // Seçili ID'leri al
            selectedNodes.forEach(function (node) {
                selectedIds.push(node.id);
            });

            // Parent ID'si dizisinde olan her düğüm için child node'ları sil
            selectedIds = selectedIds.filter(function (id) {
                var node = $('#categoryTree').jstree('get_node', id);
                // Eğer node'un parent'ı parentIds dizisinde ise, o node'u sil
                return !parentIds.includes(node.parent);
            });

            console.log("Filtered selected IDs:", selectedIds);
            formData.append("CategoryIds", selectedIds.join(','));


            //var selectedCategories = [];
            //var selectedSubcategories = [];

            //categoryCheckboxes.forEach(function (checkbox) {
            //    if (checkbox.checked) {
            //        selectedCategories.push(checkbox.id);
            //    }
            //});

            //subcategoryCheckboxes.forEach(function (checkbox) {
            //    if (checkbox.checked && !checkbox.disabled) {
            //        selectedSubcategories.push(checkbox.id);
            //    }
            //});

            //console.log('Selected Categories:', selectedCategories);
            //console.log('Selected Subcategories:', selectedSubcategories);

        
            var selectedProducts = products.getValue(true);
            formData.append("Products", selectedProducts);

            console.log('Selected products:', selectedProducts);


            if ($('#couponForm').valid()) {

                $.ajax({
                    url: '/Management/EditCoupon/',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.success==true) {
                            toastr.success(response.message);

                            setTimeout(function () {
                                location.reload();
                            }, 1000);

                        } else {
                            toastr.error(response.message);
                        }

                    }, error: function (e) {
                        toastr.error('Kupon Eklenirken Bir Hata Oluştu', 'Hata');

                    }

                });


            }


        });
    });


</script>
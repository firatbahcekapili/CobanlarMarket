@model CobanlarMarket.Models.AllViewModel
@{
    ViewBag.Title = "AddCoupon";
    Layout = "~/Views/Shared/_ManagementLayout.cshtml";
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/bbbootstrap/libraries@main/choices.min.css">
<link href="https://cdn.jsdelivr.net/npm/pretty-checkbox@3.0/dist/pretty-checkbox.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/gh/bbbootstrap/libraries@main/choices.min.js"></script>

<div class=" mt-5 ml-5 mr-5">

    <form id="couponForm">
        <div class="row justify-content-center bg-white mb-5">
            <div class="col-12  pt-4 pb-4 pl-5  ">
                <h3>Kupon Ekle</h3>

            </div>

            <div class="col-12  p-5">


                @{
                    CobanlarMarket.Models.coupons m = new CobanlarMarket.Models.coupons();
                }


                <div class="form-horizontal">

                    <div class="form-group">
                        <label for="code">Kupon Kodu</label>

                        @Html.EditorFor(model => m.Code, new { htmlAttributes = new { name = "code", @class = "form-control", placeholder = "Kupon Kodunu Giriniz", id = "code" } })
                        @Html.ValidationMessageFor(model => m.Code, "", new { @class = "text-danger" })

                    </div>

                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="dtype">İndirim Türü</label>

                            @Html.DropDownListFor(model => m.DiscountType, (IEnumerable<SelectListItem>)ViewBag.DiscountTypes, "Seçiniz", new { name = "dtype", @class = "form-control", placeholder = "İndirim Türü Seçiniz", id = "dtype" })
                            @Html.ValidationMessageFor(model => m.DiscountType, "", new { @class = "text-danger" })

                        </div>

                        <div class="form-group col-md-6">
                            <label for="dvalue">İndirim Değeri</label>
                            @{
                                var a = 0;
                            }
                            @Html.EditorFor(model => a, new { htmlAttributes = new { name = "dvalue", @class = "form-control", placeholder = "İndirim Değeri Giriniz", id = "dvalue" } })
                            @Html.ValidationMessageFor(model => m.DiscountValue, "", new { @class = "text-danger" })

                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="minprice">Kupon İçin Gerekli Minumum Tutar</label>

                            @Html.EditorFor(model => m.MinimumSpend, new { htmlAttributes = new { type = "number", name = "minprice", min = "0", @class = "form-control", placeholder = "Fiyatı Giriniz", id = "minprice" } })
                            @Html.ValidationMessageFor(model => m.MinimumSpend, "", new { @class = "text-danger" })

                        </div>

                        <div class="form-group col-md-6">
                            <label for="minprice">Maksimum İndirim Tutarı</label>


                            @Html.EditorFor(model => m.MaxDiscountAmount, new { htmlAttributes = new { type = "number", name = "maxprice", min = "0", @class = "form-control", placeholder = "Fiyatı Giriniz", id = "maxprice" } })
                            @Html.ValidationMessageFor(model => m.MaxDiscountAmount, "", new { @class = "text-danger" })

                        </div>


                    </div>

                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="startdate">Başlangıç Tarihi</label>

                            @Html.EditorFor(model => m.StartDate, "Başlangıç Tarihi", new { htmlAttributes = new { type = "date", name = "startdate", @class = "form-control", placeholder = "Başlangıç Tarihi", id = "startdate" } })
                            @Html.ValidationMessageFor(model => m.StartDate, "", new { @class = "text-danger" })

                        </div>

                        <div class="form-group col-md-6">
                            <label for="enddate">Bitiş Tarihi</label>

                            @Html.EditorFor(model => m.EndDate, "Bitiş Tarihi", new { htmlAttributes = new { type = "date", name = "enddate", @class = "form-control", placeholder = "Başlangıç Tarihi", id = "enddate", disabled = "disabled" } })
                            @Html.ValidationMessageFor(model => m.EndDate, "", new { @class = "text-danger" })

                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label>Kuponun Geçerli Olacağı Kategorileri Seçin</label>
                      
                            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.12/themes/default/style.min.css" />
                            <script src="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.12/jstree.min.js"></script>

                        
                                <div id="categoryTree" style="max-height:300px;overflow:auto;">
                                    <ul>
                                        @foreach (var category in Model.categories)
                                        {
                                            <li id="c-@category.id">
                                                @category.name
                                            <ul>
                                                @foreach (var subcategory in Model.sub_categories.Where(x => x.parent_id == category.id))
                                                {
                                                    <li id="sc-@subcategory.id">
                                                        @subcategory.name
                                                    <ul>
                                                        @foreach (var subsubCategory in Model.sub_subcategories.Where(ss => ss.parent_sub_category_id == subcategory.id))
                                                        {
                                                            <li id="ssc-@subsubCategory.id">@subsubCategory.name</li>
                                                        }
                                                    </ul>
                                                </li>
                                            }
                                            </ul>
                                        </li>
                                    }
                                    </ul>
                                </div>
                           

                        </div>
                        <div class="form-group col-md-6">
                            <label>Kuponun Geçerli Olacağı Ürünleri Seçin</label>

                            <select class="label ui selection fluid dropdown   " id="products" multiple>

                                @foreach (var item in Model.products)
                                {
                                    <option value="@item.id">@item.name</option>
                                }
                            </select>
                        </div>
                    </div>



                    <div class="form-group">
                        <div class="col-md-offset-2 ">
                            <a id="submitbtn" class="btn btn-outline-primary float-right">Kaydet</a>
                        </div>
                    </div>
                </div>



            </div>
        </div>

    </form>
</div>
<script>
    $(document).ready(function () {
        $('#categoryTree').jstree({
            "plugins": ["checkbox"],
            "core": {
                "themes": {
                    "responsive": false,
                    "icons": false
                }
            },
            "checkbox": {
                "three_state": false,
                "cascade": "up+down"
            }
        });
    });




    document.addEventListener("DOMContentLoaded", function () {
        var startDateInput = document.getElementById("startdate");
        var endDateInput = document.getElementById("enddate");

        // Başlangıç tarihini bugünden başlat
        var today = new Date().toISOString().split("T")[0];
        startDateInput.setAttribute("min", today);
        endDateInput.setAttribute("min", today);


        // Başlangıç tarihi seçildiğinde bitiş tarihini aktif hale getir
        startDateInput.addEventListener("change", function () {
            endDateInput.disabled = false;
            endDateInput.setAttribute("min", startDateInput.value);

            if (endDateInput.value < startDateInput.value && endDateInput.value != "") {
                alert("Bitiş tarihi, başlangıç tarihinden önce olamaz!");
                endDateInput.value = "";
            }

        });

        // Bitiş tarihini başlangıç tarihinden önce seçilemez yap
        endDateInput.addEventListener("change", function () {
            if (endDateInput.value < startDateInput.value) {
                alert("Bitiş tarihi, başlangıç tarihinden önce olamaz!");
                endDateInput.value = "";
            }
        });
    });

    document.addEventListener('DOMContentLoaded', function () {
       @*
           //var categoryCheckboxes = document.querySelectorAll('.category-checkbox');
        //var subcategoryCheckboxes = document.querySelectorAll('.subcategory-checkbox');
        //var subsubcategoryCheckboxes = document.querySelectorAll('.subsubcategory-checkbox');

        //// Category checkbox event listener
        //categoryCheckboxes.forEach(function (categoryCheckbox) {
        //    categoryCheckbox.addEventListener('change', function () {
        //        var categoryId = this.getAttribute('data-category-id');
        //        var relatedSubcategories = document.querySelectorAll('.subcategory-checkbox[data-parent-id="' + categoryId + '"]');
        //        var relatedSubsubcategories = document.querySelectorAll('.subsubcategory-checkbox[data-category-id="' + categoryId + '"]');

        //        relatedSubcategories.forEach(function (subcategoryCheckbox) {
        //            subcategoryCheckbox.checked = categoryCheckbox.checked;
        //            var subcategoryId = subcategoryCheckbox.getAttribute('id');
        //            var relatedSubsubcategories = document.querySelectorAll('.subsubcategory-checkbox[data-parent-subcategory-id="' + subcategoryId + '"]');
        //            relatedSubsubcategories.forEach(function (subsubCheckbox) {
        //                subsubCheckbox.checked = categoryCheckbox.checked;
        //            });
        //        });
        //    });
        //});

        //// Subcategory checkbox event listener
        //subcategoryCheckboxes.forEach(function (subcategoryCheckbox) {
        //    subcategoryCheckbox.addEventListener('change', function () {
        //        var parentCategoryId = this.getAttribute('data-parent-id');
        //        var parentCategoryCheckbox = document.querySelector('.category-checkbox[data-category-id="' + parentCategoryId + '"]');
        //        var relatedSubsubcategories = document.querySelectorAll('.subsubcategory-checkbox[data-parent-subcategory-id="' + this.id + '"]');

        //        // Check/uncheck sub-subcategories when subcategory is toggled
        //        relatedSubsubcategories.forEach(function (subsubCheckbox) {
        //            subsubCheckbox.checked = subcategoryCheckbox.checked;
        //        });

        //        // Check if all subcategories are checked
        //        var siblingSubcategories = document.querySelectorAll('.subcategory-checkbox[data-parent-id="' + parentCategoryId + '"]');
        //        var allSubcategoriesChecked = Array.from(siblingSubcategories).every(function (subCheckbox) {
        //            return subCheckbox.checked;
        //        });

        //        if (allSubcategoriesChecked) {
        //            parentCategoryCheckbox.checked = true;
        //        } else {
        //            parentCategoryCheckbox.checked = false;
        //        }
        //    });
        //});

        //// Sub-subcategory checkbox event listener
        //subsubcategoryCheckboxes.forEach(function (subsubCheckbox) {
        //    subsubCheckbox.addEventListener('change', function () {
        //        var parentSubcategoryId = this.getAttribute('data-parent-subcategory-id');
        //        var parentSubcategoryCheckbox = document.querySelector('.subcategory-checkbox[id="' + parentSubcategoryId + '"]');
        //        var siblingSubsubcategories = document.querySelectorAll('.subsubcategory-checkbox[data-parent-subcategory-id="' + parentSubcategoryId + '"]');

        //        // Check if all sub-subcategories are checked
        //        var allSubsubcategoriesChecked = Array.from(siblingSubsubcategories).every(function (subsubCheckbox) {
        //            return subsubCheckbox.checked;
        //        });

        //        if (allSubsubcategoriesChecked) {
        //            parentSubcategoryCheckbox.checked = true;
        //        } else {
        //            parentSubcategoryCheckbox.checked = false;
        //        }

        //        // Check if all subcategories are checked
        //        var parentCategoryId = parentSubcategoryCheckbox.getAttribute('data-parent-id');
        //        var siblingSubcategories = document.querySelectorAll('.subcategory-checkbox[data-parent-id="' + parentCategoryId + '"]');
        //        var allSubcategoriesChecked = Array.from(siblingSubcategories).every(function (subCheckbox) {
        //            return subCheckbox.checked;
        //        });

        //        var parentCategoryCheckbox = document.querySelector('.category-checkbox[data-category-id="' + parentCategoryId + '"]');
        //        if (allSubcategoriesChecked) {
        //            parentCategoryCheckbox.checked = true;
        //        } else {
        //            parentCategoryCheckbox.checked = false;
        //        }
        //    });
        //});
           *@

        var element = document.getElementById('products');
        var products = new Choices('#products', {
            removeItemButton: true,
        });


   

        $('#submitbtn').on("click", function (e) {
            e.preventDefault();
            var code = $('#code').val() || "";
            var dtype = $('#dtype').find('option:selected').val() || "";
            var dvalue = $('#dvalue').val() || "";
            var minprice = $('#minprice').val() || "";
            var maxprice = $('#maxprice').val() || "";
            var startdate = $('#startdate').val() || "";
            var enddate = $('#enddate').val() || "";

            var formData = new FormData();
            formData.append("Code", code);
            formData.append("Type", dtype);
            formData.append("Value", dvalue);
            formData.append("MinPrice", minprice);
            formData.append("MaxPrice", maxprice);
            formData.append("StartDate", startdate);
            formData.append("EndDate", enddate);

            
            var selectedNodes = $('#categoryTree').jstree('get_checked', true);
            var selectedIds = [];

            var parentIds = selectedNodes.map(function (node) {
                return node.id; // Her düğümün ID'sini al
            });

            // Seçili ID'leri al
            selectedNodes.forEach(function (node) {
                selectedIds.push(node.id);
            });

            // Parent ID'si dizisinde olan her düğüm için child node'ları sil
            selectedIds = selectedIds.filter(function (id) {
                var node = $('#categoryTree').jstree('get_node', id);
                // Eğer node'un parent'ı parentIds dizisinde ise, o node'u sil
                return !parentIds.includes(node.parent);
            });

            console.log("Filtered selected IDs:", selectedIds);
               
    


            formData.append("CategoryIds", selectedIds.join(','));

            var selectedProducts = products.getValue(true);
            formData.append("Products", selectedProducts);

            console.log('Selected products:', selectedProducts);

            if ($('#couponForm').valid()) {

                $.ajax({
                    url: '/Management/AddCoupon/',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.success == true) {
                            toastr.success(response.message);

                            document.getElementById("couponForm").reset();

                            $('#categoryTree').jstree().deselect_all(true);


                        } else {
                            toastr.error(response.message);
                        }

                    }, error: function (e) {
                        toastr.error('Kupon Eklenirken Bir Hata Oluştu', 'Hata');

                    }

                });


            }


        });
    });


</script>
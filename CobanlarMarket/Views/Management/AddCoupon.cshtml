@model CobanlarMarket.Models.AllViewModel
@{
    ViewBag.Title = "AddCoupon";
    Layout = "~/Views/Shared/_ManagementLayout.cshtml";
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/bbbootstrap/libraries@main/choices.min.css">
<link href="https://cdn.jsdelivr.net/npm/pretty-checkbox@3.0/dist/pretty-checkbox.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/gh/bbbootstrap/libraries@main/choices.min.js"></script>

<div class=" mt-5 ml-5 mr-5">
    <h2>Kupon Ekle</h2>

    <form id="couponForm">
        <div class="row justify-content-center">

            <div class="col-12 bg-white p-5">


                @{
                    CobanlarMarket.Models.coupons m = new CobanlarMarket.Models.coupons();
                }


                <div class="form-horizontal">

                    <div class="form-group">
                        <label for="code">Kupon Kodu</label>

                        @Html.EditorFor(model => m.Code, new { htmlAttributes = new { name = "code", @class = "form-control", placeholder = "Kupon Kodunu Giriniz", id = "code" } })
                        @Html.ValidationMessageFor(model => m.Code, "", new { @class = "text-danger" })

                    </div>

                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="dtype">İndirim Türü</label>

                            @Html.DropDownListFor(model => m.DiscountType, (IEnumerable<SelectListItem>)ViewBag.DiscountTypes, "Seçiniz", new { name = "dtype", @class = "form-control", placeholder = "İndirim Türü Seçiniz", id = "dtype" })
                            @Html.ValidationMessageFor(model => m.DiscountType, "", new { @class = "text-danger" })

                        </div>

                        <div class="form-group col-md-6">
                            <label for="dvalue">İndirim Değeri</label>
                            @{
                                var a = 0;
                            }
                            @Html.EditorFor(model => a, new { htmlAttributes = new { name = "dvalue", @class = "form-control", placeholder = "İndirim Değeri Giriniz", id = "dvalue" } })
                            @Html.ValidationMessageFor(model => m.DiscountValue, "", new { @class = "text-danger" })

                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="minprice">Kupon İçin Gerekli Minumum Tutar</label>

                            @Html.EditorFor(model => m.MinimumSpend, new { htmlAttributes = new { type = "number", name = "minprice", min = "0", @class = "form-control", placeholder = "Fiyatı Giriniz", id = "minprice" } })
                            @Html.ValidationMessageFor(model => m.MinimumSpend, "", new { @class = "text-danger" })

                        </div>

                        <div class="form-group col-md-6">
                            <label for="minprice">Maksimum İndirim Tutarı</label>


                            @Html.EditorFor(model => m.MaxDiscountAmount, new { htmlAttributes = new { type = "number", name = "maxprice", min = "0", @class = "form-control", placeholder = "Fiyatı Giriniz", id = "maxprice" } })
                            @Html.ValidationMessageFor(model => m.MaxDiscountAmount, "", new { @class = "text-danger" })

                        </div>


                    </div>

                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="startdate">Başlangıç Tarihi</label>

                            @Html.EditorFor(model => m.StartDate, "Başlangıç Tarihi", new { htmlAttributes = new { type = "date", name = "startdate", @class = "form-control", placeholder = "Başlangıç Tarihi", id = "startdate" } })
                            @Html.ValidationMessageFor(model => m.StartDate, "", new { @class = "text-danger" })

                        </div>

                        <div class="form-group col-md-6">
                            <label for="enddate">Bitiş Tarihi</label>

                            @Html.EditorFor(model => m.EndDate, "Bitiş Tarihi", new { htmlAttributes = new { type = "date", name = "enddate", @class = "form-control", placeholder = "Başlangıç Tarihi", id = "enddate" } })
                            @Html.ValidationMessageFor(model => m.EndDate, "", new { @class = "text-danger" })

                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label>Kuponun Geçerli Olacağı Kategorileri Seçin</label>
                            <div id="categories" style="max-height:300px;overflow:auto;">
                                @foreach (var category in Model.categories)
                                {
                                    if (Model.sub_categories.Any(x => x.parent_id == category.id))
                                    {
                                        <div class="category-group">
                                            <div class="pretty p-default  p-curve p-smooth">
                                                <input type="checkbox" class="category-checkbox" data-category-id="@category.id" id="@category.id" />
                                                <div class="state p-primary">
                                                    <label>@category.name</label>
                                                </div>
                                            </div>

                                            <div class="subcategories">
                                                @foreach (var subcategory in Model.sub_categories.Where(x => x.parent_id == category.id))
                                                {
                                                    <div class="pretty p-default p-curve p-smooth">
                                                        <input type="checkbox" class="subcategory-checkbox" data-parent-id="@category.id" id="@subcategory.id" />
                                                        <div class="state p-primary">
                                                            <label>@subcategory.name</label>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="pretty p-default p-curve p-smooth">
                                            <input type="checkbox" class="category-checkbox" data-category-id="@category.id" id="@category.id" />
                                            <div class="state p-primary">
                                                <label>@category.name</label>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                        <div class="form-group col-md-6">
                            <label>Kuponun Geçerli Olacağı Ürünleri Seçin</label>

                            <select class="label ui selection fluid dropdown   " id="products" multiple>

                                @foreach (var item in Model.products)
                                {
                                    <option value="@item.id">@item.name</option>
                                }
                            </select>
                        </div>
                    </div>



                    <div class="form-group">
                        <div class="col-md-offset-2 ">
                            <a id="submitbtn" class="btn btn-outline-primary float-right">Kaydet</a>
                        </div>
                    </div>
                </div>



            </div>
        </div>

    </form>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var categoryCheckboxes = document.querySelectorAll('.category-checkbox');

        categoryCheckboxes.forEach(function (checkbox) {
            checkbox.addEventListener('change', function () {
                var categoryId = this.getAttribute('data-category-id');
                var subcategoryCheckboxes = document.querySelectorAll('.subcategory-checkbox[data-parent-id="' + categoryId + '"]');
                subcategoryCheckboxes.forEach(function (subCheckbox) {
                    subCheckbox.checked = checkbox.checked;
                    subCheckbox.disabled = checkbox.checked;
                });
            });
        });

        var subcategoryCheckboxes = document.querySelectorAll('.subcategory-checkbox');
        subcategoryCheckboxes.forEach(function (checkbox) {
            checkbox.addEventListener('change', function () {
                var parentId = this.getAttribute('data-parent-id');
                var parentCheckbox = document.querySelector('.category-checkbox[data-category-id="' + parentId + '"]');
                var siblingSubcategoryCheckboxes = document.querySelectorAll('.subcategory-checkbox[data-parent-id="' + parentId + '"]');

                var allChecked = Array.from(siblingSubcategoryCheckboxes).every(function (subCheckbox) {
                    return subCheckbox.checked;
                });

                if (allChecked) {
                    parentCheckbox.checked = true;
                    parentCheckbox.indeterminate = false;
                    siblingSubcategoryCheckboxes.forEach(function (subCheckbox) {
                        subCheckbox.disabled = true;
                    });
                } else {
                    parentCheckbox.checked = false;
                    parentCheckbox.indeterminate = true;
                    siblingSubcategoryCheckboxes.forEach(function (subCheckbox) {
                        subCheckbox.disabled = false;
                    });
                }
            });
        });

       



        var element = document.getElementById('products');
        var products = new Choices('#products', {
            removeItemButton: true,
        });


   

        $('#submitbtn').on("click", function (e) {
            e.preventDefault();
            var code = $('#code').val();
            var dtype = $('#dtype').find('option:selected').val();
            var dvalue = $('#dvalue').val();
            var minprice = $('#minprice').val();
            var maxprice = $('#maxprice').val();
            var startdate = $('#startdate').val();
            var enddate = $('#enddate').val();

            var formData = new FormData();
            formData.append("Code", code);
            formData.append("Type", dtype);
            formData.append("Value", dvalue);
            formData.append("MinPrice", minprice);
            formData.append("MaxPrice", maxprice);
            formData.append("StartDate", startdate);
            formData.append("EndDate", enddate);

            
          
               
                var selectedCategories = [];
                var selectedSubcategories = [];

                categoryCheckboxes.forEach(function (checkbox) {
                    if (checkbox.checked) {
                        selectedCategories.push(checkbox.id);
                    }
                });

                subcategoryCheckboxes.forEach(function (checkbox) {
                    if (checkbox.checked && !checkbox.disabled) {
                        selectedSubcategories.push(checkbox.id);
                    }
                });

                console.log('Selected Categories:', selectedCategories);
                console.log('Selected Subcategories:', selectedSubcategories);

            formData.append("Categories", selectedCategories);
            formData.append("SubCategories", selectedSubcategories);

            var selectedProducts = products.getValue(true);
            formData.append("Products", selectedProducts);

            console.log('Selected products:', selectedProducts);

            if ($('#couponForm').valid()) {

                $.ajax({
                    url: '/Management/AddCoupon/',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.success == true) {
                            toastr.success(response.message);

                            document.getElementById("couponForm").reset();




                        } else {
                            toastr.error(response.message);
                        }

                    }, error: function (e) {
                        toastr.error('Kupon Eklenirken Bir Hata Oluştu', 'Hata');

                    }

                });


            }


        });
    });


</script>